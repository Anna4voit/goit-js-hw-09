{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAkCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAGpCJ,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IA3CQO,SAASC,cAAc,SAE/BC,iBAAiB,UAExB,SAAkBC,GAChBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,OACXC,EAAaC,OAAOH,EAAKZ,MAAMgB,OAC/BC,EAAcF,OAAOH,EAAKM,OAAOF,OACjCG,EAAYJ,OAAOH,EAAKQ,KAAKJ,OACjC,GAAIF,EAAa,GAAKG,EAAc,GAAKE,EAAY,EACnDE,EAAAzB,GAAS0B,OAAOC,QAAQ,qDAExB,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAaO,GAAK,EAAG,CAEvC1B,EADgB0B,EAAI,EACKV,EAAaK,EAAYK,GAC/CC,MAAK,SAAAC,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MAEjBqB,EAAAzB,GAAS0B,OAAOK,QACd,uBAAwCC,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAGjD6B,OAAM,SAAAH,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MAElBqB,EAAAzB,GAAS0B,OAAOQ,QACd,sBAAqCF,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form');\n\nformEl.addEventListener('submit', onSubmit);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  const form = e.target;\n  let inputDelay = Number(form.delay.value);\n  let inputAmount = Number(form.amount.value);\n  let inputStep = Number(form.step.value);\n  if (inputDelay < 0 || inputAmount < 0 || inputStep < 0) {\n    Notiflix.Notify.warning('The number must be greater than 0. Try again');\n  } else {\n    for (let i = 0; i < inputAmount; i += 1) {\n      let positions = i + 1;\n      createPromise(positions, inputDelay + inputStep * i)\n        .then(({ position, delay }) => {\n          //console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          //console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n    }\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","document","querySelector","addEventListener","e","preventDefault","form","target","inputDelay","Number","value","inputAmount","amount","inputStep","step","$parcel$interopDefault","Notify","warning","i","then","param","success","concat","catch","failure"],"version":3,"file":"03-promises.a619be3d.js.map"}